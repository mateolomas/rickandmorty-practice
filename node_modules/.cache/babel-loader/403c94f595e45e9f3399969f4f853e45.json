{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from 'react';\n\nfunction useFetchData() {\n  _s();\n\n  const [characterList, setCharacterList] = useState([]);\n\n  const getCharacter = async () => {\n    try {\n      const response = await axios.get('https://rickandmortyapi.com/api/character/');\n      const {\n        results\n      } = await response.data;\n      setCharacterList(results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getCharacter();\n  }, []);\n  return {\n    characterList\n  };\n}\n\n_s(useFetchData, \"nRicrTE5oO0OLRALK78dZqvIuig=\");\n\nexport default useFetchData;","map":{"version":3,"sources":["/Users/sebastian/rickandmorty-practice/src/helpers/usefetchData.tsx"],"names":["axios","useState","useEffect","useFetchData","characterList","setCharacterList","getCharacter","response","get","results","data","error","console","log"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AAEpB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAW,EAAX,CAAlD;;AAEA,QAAMK,YAAY,GAAG,YAAY;AAC7B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAsB,4CAAtB,CAAvB;AACA,YAAM;AAACC,QAAAA;AAAD,UAAa,MAAMF,QAAQ,CAACG,IAAlC;AACAL,MAAAA,gBAAgB,CAACI,OAAD,CAAhB;AAED,KALD,CAMA,OAAOE,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AAGF,GAZH;;AAcET,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,YAAY;AAEb,GAHQ,EAGN,EAHM,CAAT;AAML,SAAO;AAACF,IAAAA;AAAD,GAAP;AACA;;GAzBQD,Y;;AA2BT,eAAeA,YAAf","sourcesContent":["import { Characters, Result } from '../interfaces/types';\nimport axios from \"axios\";\nimport { useState, useEffect } from 'react';\n\nfunction useFetchData() {\n\n    const [characterList, setCharacterList] = useState<Result[]>([]);\n\n    const getCharacter = async () => {\n        try {\n          const response = await axios.get<Characters>('https://rickandmortyapi.com/api/character/');\n          const {results } = await response.data;\n          setCharacterList(results);\n          \n        }\n        catch (error) {\n          console.log(error);\n        }\n    \n    \n      }\n\n      useEffect(() => {\n        getCharacter();\n\n      }, []);\n\n      \n return {characterList};\n}\n\nexport default useFetchData"]},"metadata":{},"sourceType":"module"}